# coding: utf-8

"""
    Binance Public API

    The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: zheye@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Market(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_asset_symbol': 'str',
        'quote_asset_symbol': 'str',
        'list_price': 'str',
        'tick_size': 'str',
        'lot_size': 'str'
    }

    attribute_map = {
        'base_asset_symbol': 'base_asset_symbol',
        'quote_asset_symbol': 'quote_asset_symbol',
        'list_price': 'list_price',
        'tick_size': 'tick_size',
        'lot_size': 'lot_size'
    }

    def __init__(self, base_asset_symbol=None, quote_asset_symbol=None, list_price=None, tick_size=None, lot_size=None):  # noqa: E501
        """Market - a model defined in Swagger"""  # noqa: E501
        self._base_asset_symbol = None
        self._quote_asset_symbol = None
        self._list_price = None
        self._tick_size = None
        self._lot_size = None
        self.discriminator = None
        if base_asset_symbol is not None:
            self.base_asset_symbol = base_asset_symbol
        if quote_asset_symbol is not None:
            self.quote_asset_symbol = quote_asset_symbol
        if list_price is not None:
            self.list_price = list_price
        if tick_size is not None:
            self.tick_size = tick_size
        if lot_size is not None:
            self.lot_size = lot_size

    @property
    def base_asset_symbol(self):
        """Gets the base_asset_symbol of this Market.  # noqa: E501


        :return: The base_asset_symbol of this Market.  # noqa: E501
        :rtype: str
        """
        return self._base_asset_symbol

    @base_asset_symbol.setter
    def base_asset_symbol(self, base_asset_symbol):
        """Sets the base_asset_symbol of this Market.


        :param base_asset_symbol: The base_asset_symbol of this Market.  # noqa: E501
        :type: str
        """

        self._base_asset_symbol = base_asset_symbol

    @property
    def quote_asset_symbol(self):
        """Gets the quote_asset_symbol of this Market.  # noqa: E501


        :return: The quote_asset_symbol of this Market.  # noqa: E501
        :rtype: str
        """
        return self._quote_asset_symbol

    @quote_asset_symbol.setter
    def quote_asset_symbol(self, quote_asset_symbol):
        """Sets the quote_asset_symbol of this Market.


        :param quote_asset_symbol: The quote_asset_symbol of this Market.  # noqa: E501
        :type: str
        """

        self._quote_asset_symbol = quote_asset_symbol

    @property
    def list_price(self):
        """Gets the list_price of this Market.  # noqa: E501


        :return: The list_price of this Market.  # noqa: E501
        :rtype: str
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this Market.


        :param list_price: The list_price of this Market.  # noqa: E501
        :type: str
        """

        self._list_price = list_price

    @property
    def tick_size(self):
        """Gets the tick_size of this Market.  # noqa: E501


        :return: The tick_size of this Market.  # noqa: E501
        :rtype: str
        """
        return self._tick_size

    @tick_size.setter
    def tick_size(self, tick_size):
        """Sets the tick_size of this Market.


        :param tick_size: The tick_size of this Market.  # noqa: E501
        :type: str
        """

        self._tick_size = tick_size

    @property
    def lot_size(self):
        """Gets the lot_size of this Market.  # noqa: E501


        :return: The lot_size of this Market.  # noqa: E501
        :rtype: str
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this Market.


        :param lot_size: The lot_size of this Market.  # noqa: E501
        :type: str
        """

        self._lot_size = lot_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Market, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Market):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
