# coding: utf-8

"""
    Binance Public API

    The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: zheye@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Fee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msg_type': 'str',
        'fee': 'int',
        'fee_for': 'int'
    }

    attribute_map = {
        'msg_type': 'msg_type',
        'fee': 'fee',
        'fee_for': 'fee_for'
    }

    def __init__(self, msg_type=None, fee=None, fee_for=None):  # noqa: E501
        """Fee - a model defined in Swagger"""  # noqa: E501
        self._msg_type = None
        self._fee = None
        self._fee_for = None
        self.discriminator = None
        if msg_type is not None:
            self.msg_type = msg_type
        if fee is not None:
            self.fee = fee
        if fee_for is not None:
            self.fee_for = fee_for

    @property
    def msg_type(self):
        """Gets the msg_type of this Fee.  # noqa: E501


        :return: The msg_type of this Fee.  # noqa: E501
        :rtype: str
        """
        return self._msg_type

    @msg_type.setter
    def msg_type(self, msg_type):
        """Sets the msg_type of this Fee.


        :param msg_type: The msg_type of this Fee.  # noqa: E501
        :type: str
        """

        self._msg_type = msg_type

    @property
    def fee(self):
        """Gets the fee of this Fee.  # noqa: E501


        :return: The fee of this Fee.  # noqa: E501
        :rtype: int
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this Fee.


        :param fee: The fee of this Fee.  # noqa: E501
        :type: int
        """

        self._fee = fee

    @property
    def fee_for(self):
        """Gets the fee_for of this Fee.  # noqa: E501


        :return: The fee_for of this Fee.  # noqa: E501
        :rtype: int
        """
        return self._fee_for

    @fee_for.setter
    def fee_for(self, fee_for):
        """Sets the fee_for of this Fee.


        :param fee_for: The fee_for of this Fee.  # noqa: E501
        :type: int
        """

        self._fee_for = fee_for

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
