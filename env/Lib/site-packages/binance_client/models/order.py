# coding: utf-8

"""
    Binance Public API

    The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: zheye@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cumulate_quantity': 'str',
        'fee': 'str',
        'last_executed_price': 'str',
        'order_create_time': 'str',
        'order_id': 'str',
        'owner': 'str',
        'price': 'str',
        'quantity': 'str',
        'side': 'int',
        'status': 'str',
        'trade_id': 'str',
        'symbol': 'str',
        'transaction_hash': 'str',
        'transaction_t_ime': 'str',
        'type': 'int'
    }

    attribute_map = {
        'cumulate_quantity': 'cumulateQuantity',
        'fee': 'fee',
        'last_executed_price': 'lastExecutedPrice',
        'order_create_time': 'orderCreateTime',
        'order_id': 'orderId',
        'owner': 'owner',
        'price': 'price',
        'quantity': 'quantity',
        'side': 'side',
        'status': 'status',
        'trade_id': 'tradeId',
        'symbol': 'symbol',
        'transaction_hash': 'transactionHash',
        'transaction_t_ime': 'transactionTIme',
        'type': 'type'
    }

    def __init__(self, cumulate_quantity=None, fee=None, last_executed_price=None, order_create_time=None, order_id=None, owner=None, price=None, quantity=None, side=None, status=None, trade_id=None, symbol=None, transaction_hash=None, transaction_t_ime=None, type=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501
        self._cumulate_quantity = None
        self._fee = None
        self._last_executed_price = None
        self._order_create_time = None
        self._order_id = None
        self._owner = None
        self._price = None
        self._quantity = None
        self._side = None
        self._status = None
        self._trade_id = None
        self._symbol = None
        self._transaction_hash = None
        self._transaction_t_ime = None
        self._type = None
        self.discriminator = None
        if cumulate_quantity is not None:
            self.cumulate_quantity = cumulate_quantity
        if fee is not None:
            self.fee = fee
        if last_executed_price is not None:
            self.last_executed_price = last_executed_price
        if order_create_time is not None:
            self.order_create_time = order_create_time
        if order_id is not None:
            self.order_id = order_id
        if owner is not None:
            self.owner = owner
        if price is not None:
            self.price = price
        if quantity is not None:
            self.quantity = quantity
        if side is not None:
            self.side = side
        if status is not None:
            self.status = status
        if trade_id is not None:
            self.trade_id = trade_id
        if symbol is not None:
            self.symbol = symbol
        if transaction_hash is not None:
            self.transaction_hash = transaction_hash
        if transaction_t_ime is not None:
            self.transaction_t_ime = transaction_t_ime
        if type is not None:
            self.type = type

    @property
    def cumulate_quantity(self):
        """Gets the cumulate_quantity of this Order.  # noqa: E501


        :return: The cumulate_quantity of this Order.  # noqa: E501
        :rtype: str
        """
        return self._cumulate_quantity

    @cumulate_quantity.setter
    def cumulate_quantity(self, cumulate_quantity):
        """Sets the cumulate_quantity of this Order.


        :param cumulate_quantity: The cumulate_quantity of this Order.  # noqa: E501
        :type: str
        """

        self._cumulate_quantity = cumulate_quantity

    @property
    def fee(self):
        """Gets the fee of this Order.  # noqa: E501


        :return: The fee of this Order.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this Order.


        :param fee: The fee of this Order.  # noqa: E501
        :type: str
        """

        self._fee = fee

    @property
    def last_executed_price(self):
        """Gets the last_executed_price of this Order.  # noqa: E501


        :return: The last_executed_price of this Order.  # noqa: E501
        :rtype: str
        """
        return self._last_executed_price

    @last_executed_price.setter
    def last_executed_price(self, last_executed_price):
        """Sets the last_executed_price of this Order.


        :param last_executed_price: The last_executed_price of this Order.  # noqa: E501
        :type: str
        """

        self._last_executed_price = last_executed_price

    @property
    def order_create_time(self):
        """Gets the order_create_time of this Order.  # noqa: E501


        :return: The order_create_time of this Order.  # noqa: E501
        :rtype: str
        """
        return self._order_create_time

    @order_create_time.setter
    def order_create_time(self, order_create_time):
        """Sets the order_create_time of this Order.


        :param order_create_time: The order_create_time of this Order.  # noqa: E501
        :type: str
        """

        self._order_create_time = order_create_time

    @property
    def order_id(self):
        """Gets the order_id of this Order.  # noqa: E501


        :return: The order_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Order.


        :param order_id: The order_id of this Order.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def owner(self):
        """Gets the owner of this Order.  # noqa: E501


        :return: The owner of this Order.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Order.


        :param owner: The owner of this Order.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def price(self):
        """Gets the price of this Order.  # noqa: E501


        :return: The price of this Order.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Order.


        :param price: The price of this Order.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Order.  # noqa: E501


        :return: The quantity of this Order.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Order.


        :param quantity: The quantity of this Order.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def side(self):
        """Gets the side of this Order.  # noqa: E501


        :return: The side of this Order.  # noqa: E501
        :rtype: int
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Order.


        :param side: The side of this Order.  # noqa: E501
        :type: int
        """

        self._side = side

    @property
    def status(self):
        """Gets the status of this Order.  # noqa: E501


        :return: The status of this Order.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.


        :param status: The status of this Order.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ack", "PartialFill", "IocNoFill", "FullyFill", "Canceled", "Expired", "FailedBlocking", "FailedMatching", "IocExpire"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trade_id(self):
        """Gets the trade_id of this Order.  # noqa: E501


        :return: The trade_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this Order.


        :param trade_id: The trade_id of this Order.  # noqa: E501
        :type: str
        """

        self._trade_id = trade_id

    @property
    def symbol(self):
        """Gets the symbol of this Order.  # noqa: E501


        :return: The symbol of this Order.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Order.


        :param symbol: The symbol of this Order.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def transaction_hash(self):
        """Gets the transaction_hash of this Order.  # noqa: E501


        :return: The transaction_hash of this Order.  # noqa: E501
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash):
        """Sets the transaction_hash of this Order.


        :param transaction_hash: The transaction_hash of this Order.  # noqa: E501
        :type: str
        """

        self._transaction_hash = transaction_hash

    @property
    def transaction_t_ime(self):
        """Gets the transaction_t_ime of this Order.  # noqa: E501


        :return: The transaction_t_ime of this Order.  # noqa: E501
        :rtype: str
        """
        return self._transaction_t_ime

    @transaction_t_ime.setter
    def transaction_t_ime(self, transaction_t_ime):
        """Sets the transaction_t_ime of this Order.


        :param transaction_t_ime: The transaction_t_ime of this Order.  # noqa: E501
        :type: str
        """

        self._transaction_t_ime = transaction_t_ime

    @property
    def type(self):
        """Gets the type of this Order.  # noqa: E501


        :return: The type of this Order.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Order.


        :param type: The type of this Order.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
